import { processVault } from "core/processVault";
import { parseRebateDeals } from "parsing/parseRebateDeals";
import { parseOffchainReferrals } from "parsing/parseOffchainReferrals";
import { parseVaultArgument } from "parsing/parseVault";
import type { Command } from "@commander-js/extra-typings";
import { filterWildCard } from "utils/various";

export function setUserFeeCommand(command: Command) {
  command
    .command("user-fee")
    .description(
      "Calculate and generate fee reports for a specified vault, including referral rewards and rebates for all users. \
      The output is a csv with the following columns: chainId, vault, wallet, balance, fees, pricePerShare, cashback. \
      This command require precise block input. The fromBlock and the toBlock must correspond to totalAssets updates blockNumber."
    )
    .argument(
      "chainId:VaultAddress",
      "The chain ID and vault address to find blocks for",
      parseVaultArgument
    )
    .requiredOption(
      "-f, --from-block <number>",
      "Starting block number for fee computation (exclusive). Use 'find-blocks' command to find the appropriate block number"
    )
    .requiredOption(
      "-t, --to-block <number>",
      "Ending block number for fee computation (inclusive). Use 'find-blocks' command to find the appropriate block number"
    )
    .option("-r, --readable", "Format the output in a human-readable format")
    .option(
      "-o, --output",
      "Will save the result in output/user-fee in a file with following format: <chainId>-<vaultAddress>-<from-block>-<to-block>.csv"
    )
    .option(
      "--silent",
      "This will prevent the printing of the output on stdout",
      false
    )
    .option(
      "-d, --deals <string>",
      "Path to the csv file containing OTC (Over-The-Counter) deals on the fee rebate. \
      The amount of % is express in 10^2. For example, 8% is express 800 in the csv file. \
      A fee rebate means that the user will be refunded a percentage of the fees he paid.",
      parseRebateDeals
    )
    .option(
      "--referrals <string>",
      "Path to the csv file containing OTC (Over-The-Counter) referrals on the fee rewards. \
      The amount of % is express in 10^2. For example, 8% is express 800 in the csv file. \
      Those referrals will overwrite the on-chain referrals. \
      A fee reward means that the user will be rewarded a percentage of the fees generated by the referred user.",
      parseOffchainReferrals
    )
    .option(
      "--fee-rebate-rate <number>",
      "Bips of fees to be refunded to the referred user (e.g., 500 means 5% of fees are refunded, 5 means 0.05% of fees are refunded)",
      "500"
    )
    .option(
      "--fee-reward-rate <number>",
      "Bips of fees to be distributed to the referrer (e.g., 1500 means referrer receives 15% of fees generated by the referred user). \
      When a user refer another user, he become his lifetime referrer. We do not overwrite referals.",
      "1500"
    )
    .addHelpText(
      "after",
      `
Example:
  $ bun user-fee 1:0x07ed467acd4ffd13023046968b0859781cb90d9b -f 1000000 -l 2000000 -r -o -d dealsExample.csv
    `
    )
    .action(async (vault, options) => {
      const rebateDeals = filterWildCard(await options.deals, vault);
      const offChainReferrals = filterWildCard(await options.referrals, vault);

      const result = await processVault({
        rebateDeals,
        offChainReferrals,
        readable: options!.readable!,
        defaultReferralRateBps: Number(options!.feeRebateRate!),
        defaultRebateRateBps: Number(options!.feeRewardRate!),
        vault,
        fromBlock: BigInt(options.fromBlock),
        toBlock: BigInt(options.toBlock),
        strictBlockNumberMatching: true,
      });

      const csv = convertToCSV(result);
      if (options.silent == false) {
        console.log(csv);
      }
      if (options.output) {
        try {
          const file = Bun.file(
            `./output/user-fee/${vault.chainId}-${vault.address}-${options.fromBlock}-${options.toBlock}.csv`
          );
          await file.write(csv);
          console.log(`CSV report written to: ${file.name}`);
        } catch (error: any) {
          console.error("Error writing CSV file:", error.message);
          console.log("CSV content:");
          console.log(csv);
        }
      }
    });
}

function convertToCSV(vault: {
  chainId: number;
  address: string;
  pricePerShare: number;
  data: Record<
    string,
    {
      balance: number;
      fees: number;
      cashback: number;
    }
  >;
}) {
  const csvRows = [
    `chainId,vault,wallet,balance,fees,pricePerShare,cashback$`, // CSV header
    ...Object.entries(vault.data).map(
      ([address, { balance, fees, cashback }]) => {
        if (balance === 0) return "";
        let str = `${vault.chainId},${vault.address},${address},${balance},${fees}`;
        str += `,${vault.pricePerShare},${cashback}`;
        return str;
      }
    ),
  ];
  return csvRows.filter((row) => row !== "").join("\n");
}

const dealsCsvFormat = `chainId,vault,address,`;
const dealsCsvRowsExample = `1,0x07ed467acD4ffd13023046968b0859781cb90D9B,0x1234567890123456789012345678901234567890,1000,4500`;

const referralCsvFormat = `chainId,vault,referrer,referree,reward`;
const referralCsvRowsExample = `1,0x07ed467acD4ffd13023046968b0859781cb90D9B,0x1234567890123456789012345678901234567891,0x1234567890123456789012345678901234567890,4500`;
